#use "topfind";;
#require "num";;
#require "unix";;
#require "datalog";;
#require "str";;
#directory "_build/src/";;
#directory "_build/src/meta/";;
#directory "_build/src/arbitrary/";;
#directory "_build/tests/";;
#load "logtk.cma";;
#load "logtk_meta.cma";;
#install_printer Logtk.Symbol.fmt;;
#install_printer Logtk.Type.fmt;;
#install_printer Logtk.FOTerm.fmt;;
#install_printer Logtk.HOTerm.fmt;;
#install_printer Logtk.FOFormula.fmt;;
#install_printer Logtk.Signature.fmt;;
#install_printer Logtk.Substs.FO.fmt;;
#install_printer Logtk.Substs.HO.fmt;;
#install_printer Logtk.Substs.Ty.fmt;;
#install_printer Logtk.Symbol.fmt;;
#install_printer Logtk.Precedence.fmt;;
#install_printer Logtk.Ordering.fmt;;
#install_printer Logtk.Ast_tptp.fmt_general;;
#install_printer Logtk.Ast_tptp.fmt_role;;
#install_printer Logtk.Ast_tptp.fmt_declaration;;
#install_printer Logtk.Transform.fmt;;
#install_printer Logtk.Trace_tstp.fmt;;
#install_printer Logtk.TypeUnif.fmt_error;;
#install_printer Logtk.Term.fmt;;
open Logtk.Sequence.Infix;;
open Logtk.Type;;
module T = Logtk.Term;;
module FOT = Logtk.Term;;
module F = Logtk.FOFormula;;
module HOT = Logtk.HOTerm;;
open Logtk;;
let pterm s =
    let t = Parse_tptp.parse_term Lex_tptp.token (Lexing.from_string s) in
    let tyctx = TypeInference.Ctx.create ~base:true () in
    let _, clos = TypeInference.FO.infer tyctx t 0 in
    let renaming = Substs.Ty.Renaming.create 5 in
    TypeInference.Ctx.apply_closure ~renaming tyctx clos
;;
let pform s =
    let f = Parse_tptp.parse_formula Lex_tptp.token (Lexing.from_string s) in
    let tyctx = TypeInference.Ctx.create ~base:true () in
    TypeInference.FO.convert_form ~ctx:tyctx f
;;
(* optional part: meta *)
#install_printer Logtk_meta.MetaPattern.fmt;;
#install_printer Logtk_meta.MetaPattern.EncodedForm.fmt;;
#install_printer Logtk_meta.MetaPattern.Set.fmt;;
#install_printer Logtk_meta.MetaKB.fmt;;
open Logtk_meta;;
let ppat s =
    let f = pform s in
    let f = MetaPattern.EncodedForm.encode f in
    MetaPattern.create f;;
(* optional part: arbitrary *)
#require "qcheck";;
#load "logtk_arbitrary.cma";;
open Logtk_arbitrary;;
open QCheck;;
(* vim:syntax=ocaml
*)
